name: Add Project from Issue

on:
  issues:
    types: [opened]
  schedule:
    - cron: '0 23 * * *'  # 每周日午夜运行

jobs:
  add-project:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      - name: Parse issue and update .gitmodules
        id: parse_issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          REPO_OWNER: adminlove520
          REPO_NAME: securitytools
        run: |
          import os
          from github import Github

          # Initialize a GitHub client
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo('${{ github.repository }}')
          issue = repo.get_issue(number=os.environ['ISSUE_NUMBER'])

          # Check if the issue title or body contains the command to add a submodule
          issue_title = issue.title.lower()
          issue_body = issue.body.lower()

          if 'add submodule:' in issue_title or 'add submodule:' in issue_body:
              # Extract the submodule URL and path
              if 'add submodule:' in issue_title:
                  command = issue_title.split('add submodule:')[1].strip()
              else:
                  command = issue_body.split('add submodule:')[1].strip()

              parts = command.split()
              submodule_url = parts[0]
              submodule_path = parts[1]

              # Output the location and project link
              print(f"::set-output name=location::{submodule_path}")
              print(f"::set-output name=project_link::{submodule_url}")
          else:
              print("No submodule command found in the issue.")

      - name: Add submodule
        env:
          PROJECT_LINK: ${{ steps.parse_issue.outputs.project_link }}
          LOCATION: ${{ steps.parse_issue.outputs.location }}
        run: |
          if [ -n "$PROJECT_LINK" ] && [ -n "$LOCATION" ]; then
            git submodule add "$PROJECT_LINK" "$LOCATION"
          else
            echo "No valid PROJECT_LINK or LOCATION found."
          fi
        if: github.event_name == 'issues'

      - name: Cleanup 404 repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOCATION: ${{ steps.parse_issue.outputs.location }}
          PROJECT_LINK: ${{ steps.parse_issue.outputs.project_link }}
        run: |
          python .github/scripts/cleanup_repos.py --location "$LOCATION" --project-link "$PROJECT_LINK"
        if: github.event_name == 'schedule' || github.event_name == 'issues'

      - name: Add .gitkeep files
        run: |
          python .github/scripts/add_gitkeep.py
        if: github.event_name == 'schedule' || github.event_name == 'issues'

      - name: Commit changes
        run: |
          git config user.name ProjectBot
          git config user.email projectbotma@yourdomain.com
          git add .gitmodules
          git add projects/
          git submodule update --init --recursive
          git add -A
          git commit -m "Cleanup 404 repositories, update files, and add .gitkeep"
          git push origin main
        if: github.event_name == 'schedule' || github.event_name == 'issues'

      - name: Debug .gitmodules content
        run: |
          cat .gitmodules | grep "nuclei-templates"
        if: github.event_name == 'issues'