name: Cleanup Repos

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'
  issues:
    types: [opened]

jobs:
  cleanup:
    runs-on: ubuntu-latest
    if: false 
    permissions:
      actions: read  # 确保有权限读取日志
    steps:
      - name: checkout the repo
        uses: actions/checkout@v2
        with:
          submodules: true
        id: checkout_step
        continue-on-error: true

      - name: Extract failed repo URL
        if: steps.checkout_step.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            // 调用正确的 API 方法下载作业日志（无 ForRun 后缀）
            const logs = await github.rest.actions.downloadJobLogs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: context.jobId  // 仅需 job_id 参数
            });
            // 解码日志为文本并提取 URL
            const logText = new TextDecoder().decode(logs.data);
            const match = logText.match(/fatal: repository '([^']+)'/);
            if (match) {
              core.exportVariable('REPO_URL', match[1]);
            } else {
              core.setFailed('未从日志中找到失败仓库的 URL');
            }

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
        if: steps.checkout_step.outcome == 'failure'

      - name: Run cleanup script
        working-directory: ${{ github.workspace }}
        run: python .github/scripts/cleanup_repos.py ${{ env.REPO_URL }}
        if: steps.checkout_step.outcome == 'failure'